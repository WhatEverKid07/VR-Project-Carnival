using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;
using UnityEngine.XR.Interaction.Toolkit.Interactables;
using UnityEngine.XR.Interaction.Toolkit.Interactors;

public class DartThrow : MonoBehaviour
{
    private Rigidbody rb;
    private XRGrabInteractable grabInteractable;
    private XRBaseInteractor interactor;

    private Vector3 lastVelocity; // Stores last known velocity of hand

    public int velocity;

    private void Awake()
    {
        rb = GetComponent<Rigidbody>();
        grabInteractable = GetComponent<XRGrabInteractable>();
        rb.isKinematic = true; // Prevent physics while held
    }

    private void OnEnable()
    {
        grabInteractable.selectEntered.AddListener(OnGrab);
        grabInteractable.selectExited.AddListener(OnThrow);
    }

    private void OnDisable()
    {
        grabInteractable.selectEntered.RemoveListener(OnGrab);
        grabInteractable.selectExited.RemoveListener(OnThrow);
    }

    private void Update()
    {
        // Continuously track interactor's velocity while holding
        if (interactor != null)
        {
            Rigidbody interactorRb = interactor.GetComponent<Rigidbody>();
            if (interactorRb != null)
            {
                lastVelocity = interactorRb.velocity;
            }
        }
        Debug.Log(rb.velocity);
    }

    private void OnGrab(SelectEnterEventArgs args)
    {
        interactor = args.interactorObject as XRBaseInteractor;
        rb.isKinematic = true; // Disable physics while holding
    }

    private void OnThrow(SelectExitEventArgs args)
    {
        rb.isKinematic = false; // Enable physics
        rb.useGravity = true;
        interactor = null; // Clear interactor reference

        // Apply last known hand velocity when released
        rb.velocity = lastVelocity * velocity;
    }
}
